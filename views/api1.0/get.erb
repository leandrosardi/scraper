<% 
return_message = {}
begin
    # parse parameters
    lid = params[:id_login]
    version = params[:version]
	# guardar el ID de intento de l en una variable de sesion
	login = BlackStack::MySaaS::Login.where(:id => lid).first
    raise "Login not found." if login.nil?
    # parse 
    user = login.user
    # update the user last_activity
    user.scraper_last_ping_time = now
    user.scraper_last_ping_version = version
    user.save
    # trace user-extension activty
    scraper_user = BlackStack::Scraper::User.where(:id=>user.id).first
    scraper_user.track_activity
    # check if user is avaiable for working based on its stealth configuration
    s = scraper_user.why_not_available_for_assignation
    raise s if s
    # get a job
    p = BlackStack::Scraper::Page.where(
        :upload_reservation_id=>user.email, 
        :upload_start_time=>nil, 
        :upload_end_time=>nil
    ).first
    raise 'No pages assigned. Retry in few seconds.' if p.nil?
    # update page upload_start_time
    p.upload_start_time = now
    p.save
    # return
	return_message[:status] = 'success'
	return_message[:id_page] = p.id.to_guid
	return_message[:url] = p.url 
rescue => e
	# redirect
	return_message[:status] = e.message
end
# libero recursos
DB.disconnect
GC.start
# return 
return return_message.to_json
%>